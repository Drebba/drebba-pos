<?php

namespace App\Models;

use App\Models\Unit;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;

class Product extends Model
{

    use SoftDeletes;

    protected $fillable = [
        'title',
        'sku',
        'category_id',
        'purchase_price',
        'sell_price',
        'price_type',
        'tax_id',
        'unit_id',
        'short_description'
    ];

    protected $appends = ['current_stock_quantity', 'total_sell_qty'];

    public function getCurrentStockQuantityAttribute()
    {

        if ($this->productStockHistory){
          return  $this->productStockHistory->stock_quantity;
        }else{
            return 0;
        }


//        $sell_qty = 0;
//        $req_send_qty = 0;
//
//        $purchase_qty = 0;
//        $req_received_qty = 0;
//
//        /**
//         * Debit Quantity
//         **/
//
//        $total_sell_products_qty = $this->productStockHistory;
//
//        if ($total_sell_products_qty){
//            $sell_qty = $total_sell_products_qty->sell_qty;
//            $req_send_qty = $total_sell_products_qty->req_send;
//
//            $purchase_qty = $total_sell_products_qty->purchase_qty;
//            $req_received_qty = $total_sell_products_qty->req_received;
//        }
//
//
//        $debit = $purchase_qty + $req_received_qty;
//        $credit = $sell_qty + $req_send_qty;
//
//        $total = $debit - $credit;
//        return $total;
    }

    public function getTotalSellQtyAttribute(){
        $sell_qty = 0;

        $total_sell_products_qty = ProductStockHistory::where('branch_id', Auth::user()->branch_id)
            ->where('product_id', $this->id)
            ->first();

        if ($total_sell_products_qty){
            $sell_qty = $total_sell_products_qty->sell_qty;
        }

        return $sell_qty;
    }

    public function productStockHistory(){
        return $this->hasOne(ProductStockHistory::class, 'product_id', 'id')->orderByDesc('id');
    }

    public function productStockHistories(){
        return $this->hasMany(ProductStockHistory::class)
//            ->orderByDesc('id')
            ->with('branch')
            ->withoutGlobalScopes();
    }

    public function purchaseProducts()
    {
        return $this->hasMany(PurchaseProduct::class);
    }

    public function sellProducts()
    {
        return $this->hasMany(SellProduct::class);
    }

    public function tax()
    {
        return $this->belongsTo(Tax::class)->withTrashed();
    }

    public function unit(){
        return $this->belongsTo(Unit::class)->withTrashed();
    }

    public function category()
    {
        return $this->belongsTo(Category::class)->withTrashed();
    }

    public function requisitions()
    {
        return $this->hasMany(Requisition::class);
    }



    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::creating(function($model){
            $model->created_by =  auth()->user()->id;
            $model->branch_id =  1;
        });

        static::addGlobalScope('short', function (Builder $builder) {
            $builder->orderByDesc('id');
        });
    }
}
